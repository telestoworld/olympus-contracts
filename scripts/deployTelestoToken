// @dev. This script will deploy this V1.1 of Telesto. It will deploy the whole ecosystem except for the LP tokens and their bonds. 
// This should be enough of a test environment to learn about and test implementations with the Telesto as of V1.1.
// Not that the every instance of the Treasury's function 'valueOf' has been changed to 'valueOfToken'... 
// This solidity function was conflicting w js object property name

const { ethers } = require("hardhat");

async function main() {

    const [deployer] = await ethers.getSigners();
    console.log('Deploying contracts with the account: ' + deployer.address);
    const MockDAO = deployer;
    // Initial staking index
    const initialIndex = '7675210820';

    // First block epoch occurs
    const firstEpochBlock = '8961000';

    // What epoch will be first epoch
    const firstEpochNumber = '338';

    // How many blocks are in each epoch
    const epochLengthInBlocks = '2200';

    // Initial reward rate for epoch
    const initialRewardRate = '3000';

    // Ethereum 0 address, used when toggling changes in treasury
    const zeroAddress = '0x0000000000000000000000000000000000000000';

    // Large number for approval for CEuro and CUSD
    const largeApproval = '100000000000000000000000000000000';

    // Deploy TELO
    const TELO = await ethers.getContractFactory('TelestoERC20Token');
    const telo = await TELO.deploy();
    console.log("Deployed Telesto ERC20 to address:",telo.address)
    // Deploy sTELO
    const STELO = await ethers.getContractFactory('sTelesto');
    const sTELO = await STELO.deploy();
    console.log("Deployed Staked Telesto :", sTELO.address)

    // Deploy Staking
    const Staking = await ethers.getContractFactory('TelestoStaking');
    const staking = await Staking.deploy(telo.address, sTELO.address, epochLengthInBlocks, firstEpochNumber, firstEpochBlock);
    console.log("Deployed TelestoStaking :", staking.address)

    // Deploy staking warmpup
    const StakingWarmpup = await ethers.getContractFactory('StakingWarmup');
    const stakingWarmup = await StakingWarmpup.deploy(staking.address, sTELO.address);
    console.log("Deployed StakingWarmup :", stakingWarmup.address)

    console.log("starting to deploy stakingHelper with params:", staking.address,telo.address)
    // Deploy staking helper
    const StakingHelper = await ethers.getContractFactory('StakingHelper');
    const stakingHelper = await StakingHelper.deploy(staking.address, telo.address);
    console.log("Deployed stakingHelper :", stakingHelper.address)

    // Initialize sTELO and set the index
    await sTELO.initialize(staking.address);
    await sTELO.setIndex(initialIndex);

    // set distributor contract and warmup contract
    await staking.setContract('0', distributor.address);
    await staking.setContract('1', stakingWarmup.address);

    // Set treasury for TELO token
    await telo.setVault(treasury.address);

    // Add staking contract as distributor recipient
    await distributor.addRecipient(staking.address, initialRewardRate);

    // queue and toggle reward manager
    await treasury.queue('8', distributor.address);
    await treasury.toggle('8', distributor.address, zeroAddress);

    // queue and toggle deployer reserve depositor
    await treasury.queue('0', deployer.address);
    await treasury.toggle('0', deployer.address, zeroAddress);

    // queue and toggle liquidity depositor
    await treasury.queue('4', deployer.address,);
    await treasury.toggle('4', deployer.address, zeroAddress);

    // Approve staking and staking helper contact to spend deployer's TELO
    await telo.approve(staking.address, largeApproval);
    await telo.approve(stakingHelper.address, largeApproval);

    // Deposit 9,000,000 CUSD to treasury, 600,000 TELO gets minted to deployer and 8,400,000 are in treasury as excesss reserves
    await treasury.deposit('9000000000000000000000000', cUsd.address, '8400000000000000');

    // Deposit 5,000,000 CEuro to treasury, all is profit and goes as excess reserves
    await treasury.deposit('5000000000000000000000000', cEuro.address, '5000000000000000');
    // Deposit 5,000,000 CEuro to treasury, all is profit and goes as excess reserves
    await treasury.deposit('5000000000000000000000000', cMCO2.address, '5000000000000000');

    // Stake TELO through helper
    await stakingHelper.stake('100000000000');

    // Bond 1,000 TELO and CEuro in each of their bonds
    await cUsdBond.deposit('1000000000000000000000', '60000', deployer.address);
    await cEuroBond.deposit('1000000000000000000000', '60000', deployer.address);
    await cMCO2Bond.deposit('1000000000000000000000', '60000', deployer.address);

    console.log("TELO: " + telo.address);
    console.log("CUSD: " + cUsd.address);
    console.log("CEuro: " + cEuro.address);
    console.log("Treasury: " + treasury.address);
    console.log("Calc: " + telestoBondingCalculator.address);
    console.log("Staking: " + staking.address);
    console.log("sTELO: " + sTELO.address);
    console.log("Distributor " + distributor.address);
    console.log("Staking Wawrmup " + stakingWarmup.address);
    console.log("Staking Helper " + stakingHelper.address);
    console.log("CUSD Bond: " + cUsdBond.address);
    console.log("CEuro Bond: " + cEuroBond.address);
}

main()
    .then(() => process.exit())
    .catch(error => {
        console.error(error);
        process.exit(1);
    })